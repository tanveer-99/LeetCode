import java.util.*;
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  public TreeNode buildTree(int[] preorder, int[] inorder) {

    // if the length of any array is 0, then the tree will be null
    if(preorder.length == 0 && inorder.length == 0) {
      return null;
    }

    // the first element of preorder array would be the root, as preorder = root,left,right
    TreeNode root = new TreeNode(preorder[0]);
    // we've to find the index of preorder[0] in inorder, because inorder = left, root, right
    // so, every node left to the index of that element is in the left subtree and the rest is in right subtree
    int mid = 0;
    for(int i=0;i<preorder.length;i++) {
      if(preorder[0] == inorder[i]) {
        mid = i;
        break;
      }
    }

    // now the recursive function starts
    // for left subtree, only the elements upto mid from 1 in the preorder would take place
    // and for inorder, 0 to before mid, as mid is the root in the first iteration.
    root.left = buildTree(
      (Arrays.copyOfRange(preorder, 1, mid+1)),
      (Arrays.copyOfRange(inorder, 0, mid))
    );

    // for right subtree, only the elements upto length from mid+1 in the preorder would take place
    // and for inorder, mid+1 to length, as mid is the root in the first iteration.
    root.right = buildTree(
          (Arrays.copyOfRange(preorder, mid+1, preorder.length)),
          (Arrays.copyOfRange(inorder, mid+1, inorder.length))
    );

    return root;
  }
}
